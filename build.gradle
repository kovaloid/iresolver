apply plugin: 'application'
mainClassName = 'com.koval.jresolver.Launcher'

def unixClassPath = 'CLASSPATH=\\$APP_HOME/lib/*:\\$APP_HOME/config:\\$APP_HOME/rules:\\$APP_HOME/data'
def windowsClassPath = 'CLASSPATH=%APP_HOME%/lib/;%APP_HOME%/lib/*;%APP_HOME%/config;%APP_HOME%/rules;%APP_HOME%/data'

run {
  workingDir = file('src')
}

task createDataSet(type: JavaExec) {
  group 'application'
  main = "$mainClassName"
  classpath = sourceSets.main.runtimeClasspath
  workingDir = file('src')
  args = ['create-data-set']
}

task createVectorModel(type: JavaExec) {
  group 'application'
  main = "$mainClassName"
  classpath = sourceSets.main.runtimeClasspath
  workingDir = file('src')
  args = ['create-vector-model']
}

task cleanWorkFolders(type: JavaExec) {
  group 'application'
  main = "$mainClassName"
  classpath = sourceSets.main.runtimeClasspath
  workingDir = file('src')
  args = ['clean']
}

task printFields(type: JavaExec) {
  group 'application'
  main = "$mainClassName"
  classpath = sourceSets.main.runtimeClasspath
  workingDir = file('src')
  args = ['fields']
}

task testSimilarityProcessor(type: JavaExec) {
  group 'application'
  main = "$mainClassName"
  classpath = sourceSets.main.runtimeClasspath
  workingDir = file('src')
  args = ['test-similarity-processor']
}

sourceSets {
  main {
    resources {
      srcDir 'data'
      srcDir 'src/main/resources'
      srcDir 'jira-connector/src/main/resources'
      srcDir 'bugzilla-connector/src/main/resources'
      srcDir 'similarity-processor/src/main/resources'
      srcDir 'rule-engine-processor/src/main/resources'
      srcDir 'documentation-processor/src/main/resources'
      srcDir 'link-processor/src/main/resources'
      srcDir 'html-reporter/src/main/resources'
    }
  }
}

dependencies {
  compile project(':jira-connector'),
      project(':bugzilla-connector'),
      project(':similarity-processor'),
      project(':rule-engine-processor'),
      project(':documentation-processor'),
      project(':link-processor'),
      project(':html-reporter'),
      project(':text-reporter'),
      project(':test-similarity-processor')
}

wrapper {
  gradleVersion = '5.3.1'
}

distributions {
  main {
    baseName = 'jresolver'
    contents {
      from('jira-connector/src/main/resources/jira-connector.properties') { into 'config' }
      from('bugzilla-connector/src/main/resources/bugzilla-connector.properties') { into 'config' }
      from('similarity-processor/src/main/resources/similarity-processor.properties') { into 'config' }
      from('link-processor/src/main/resources/link-processor.properties') { into 'config' }
      from('html-reporter/src/main/resources') { into 'config' }
      from('src/main/resources/logback.xml') { into 'config' }
      from('src/main/resources/control.properties') { into 'config' }
      from('rule-engine-processor/src/main/resources') { into 'rules' }
      exclude('**/*-android-*.jar')
      exclude('**/*-macosx-*.jar')
      exclude('**/*-linux-armhf.jar')
      exclude('**/*-linux-ppc64le.jar')
      exclude('**/snakeyaml*.jar')
      exclude('**/sslext*.jar')
      exclude('**/oro*.jar')
      exclude('**/stax2*.jar')
      exclude('**/xpp3*.jar')
      exclude('**/xstream*.jar')
      exclude('**/xmlpull*.jar')
      exclude('**/fastutil*.jar')
      exclude('**/findbugs*.jar')
      exclude('**/freemarker*.jar')
      exclude('**/lombok*.jar')
      exclude('**/neoitertools*.jar')
      exclude('**/protobuf*.jar')
    }
  }
}

startScripts {
  classpath += files('config')
  applicationName = 'run'
  doLast {
    def windowsScriptFile = file getWindowsScript()
    def unixScriptFile = file getUnixScript()
    windowsScriptFile.text = windowsScriptFile.text
        .replaceFirst(/CLASSPATH=\S+/, windowsClassPath)
    unixScriptFile.text = unixScriptFile.text
        .replaceFirst(/CLASSPATH=\S+/, unixClassPath)
  }
}

task createDataSetScript(type: CreateStartScripts) {
  mainClassName = startScripts.mainClassName
  classpath = startScripts.classpath
  outputDir = startScripts.outputDir
  applicationName = 'create-data-set'

  createDataSetScript {
    doLast {
      def windowsScriptFile = file getWindowsScript()
      def unixScriptFile = file getUnixScript()
      windowsScriptFile.text = windowsScriptFile.text
          .replaceFirst(/CLASSPATH=\S+/, windowsClassPath)
      unixScriptFile.text = unixScriptFile.text
          .replaceFirst(/CLASSPATH=\S+/, unixClassPath)
      windowsScriptFile.text = windowsScriptFile.text
          .replaceFirst('CMD_LINE_ARGS=', 'CMD_LINE_ARGS=create-data-set')
      unixScriptFile.text = unixScriptFile.text
          .replaceFirst('APP_ARGS=', 'APP_ARGS=create-data-set')
    }
  }
}

task createVectorModelScript(type: CreateStartScripts) {
  mainClassName = startScripts.mainClassName
  classpath = startScripts.classpath
  outputDir = startScripts.outputDir
  applicationName = 'create-vector-model'

  createVectorModelScript {
    doLast {
      def windowsScriptFile = file getWindowsScript()
      def unixScriptFile = file getUnixScript()
      windowsScriptFile.text = windowsScriptFile.text
          .replaceFirst(/CLASSPATH=\S+/, windowsClassPath)
      unixScriptFile.text = unixScriptFile.text
          .replaceFirst(/CLASSPATH=\S+/, unixClassPath)
      windowsScriptFile.text = windowsScriptFile.text
          .replaceFirst('CMD_LINE_ARGS=', 'CMD_LINE_ARGS=create-vector-model')
      unixScriptFile.text = unixScriptFile.text
          .replaceFirst('APP_ARGS=', 'APP_ARGS=create-vector-model')
    }
  }
}

task cleanScript(type: CreateStartScripts) {
  mainClassName = startScripts.mainClassName
  classpath = startScripts.classpath
  outputDir = startScripts.outputDir
  applicationName = 'clean'

  cleanScript {
    doLast {
      def windowsScriptFile = file getWindowsScript()
      def unixScriptFile = file getUnixScript()
      windowsScriptFile.text = windowsScriptFile.text
          .replaceFirst(/CLASSPATH=\S+/, windowsClassPath)
      unixScriptFile.text = unixScriptFile.text
          .replaceFirst(/CLASSPATH=\S+/, unixClassPath)
      windowsScriptFile.text = windowsScriptFile.text
          .replaceFirst('CMD_LINE_ARGS=', 'CMD_LINE_ARGS=clean')
      unixScriptFile.text = unixScriptFile.text
          .replaceFirst('APP_ARGS=', 'APP_ARGS=clean')
    }
  }
}

task printFieldsScript(type: CreateStartScripts) {
  mainClassName = startScripts.mainClassName
  classpath = startScripts.classpath
  outputDir = startScripts.outputDir
  applicationName = 'print-fields'

  printFieldsScript {
    doLast {
      def windowsScriptFile = file getWindowsScript()
      def unixScriptFile = file getUnixScript()
      windowsScriptFile.text = windowsScriptFile.text
          .replaceFirst(/CLASSPATH=\S+/, windowsClassPath)
      unixScriptFile.text = unixScriptFile.text
          .replaceFirst(/CLASSPATH=\S+/, unixClassPath)
      windowsScriptFile.text = windowsScriptFile.text
          .replaceFirst('CMD_LINE_ARGS=', 'CMD_LINE_ARGS=fields')
      unixScriptFile.text = unixScriptFile.text
          .replaceFirst('APP_ARGS=', 'APP_ARGS=fields')
    }
  }
}

task testSimilarityProcessorScript(type: CreateStartScripts) {
  mainClassName = startScripts.mainClassName
  classpath = startScripts.classpath
  outputDir = startScripts.outputDir
  applicationName = 'test-similarity-processor'

  testSimilarityProcessorScript {
    doLast {
      def windowsScriptFile = file getWindowsScript()
      def unixScriptFile = file getUnixScript()
      windowsScriptFile.text = windowsScriptFile.text
          .replaceFirst(/CLASSPATH=\S+/, windowsClassPath)
      unixScriptFile.text = unixScriptFile.text
          .replaceFirst(/CLASSPATH=\S+/, unixClassPath)
      windowsScriptFile.text = windowsScriptFile.text
          .replaceFirst('CMD_LINE_ARGS=', 'CMD_LINE_ARGS=test-similarity-processor')
      unixScriptFile.text = unixScriptFile.text
          .replaceFirst('APP_ARGS=', 'APP_ARGS=test-similarity-processor')
    }
  }
}

applicationDistribution.into('bin') {
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
  from(createDataSetScript)
  from(createVectorModelScript)
  from(cleanScript)
  from(printFieldsScript)
  fileMode = 0755
}

jar {
  exclude('*.xml', '*.zip', '*.txt', '*.properties', '*.vm', '*.drl')
}

defaultTasks 'build'

allprojects {
  apply plugin: 'java'
  apply plugin: 'idea'
  apply plugin: 'eclipse'

  group = 'com.koval.jresolver'
  sourceCompatibility = 1.8

  repositories {
    mavenCentral()
    maven {
      url 'https://m2proxy.atlassian.com/repository/public'
    }
    maven {
      url 'http://repository.jboss.org/nexus/content/groups/public-jboss'
    }
  }

  apply plugin: 'checkstyle'
  checkstyle {
    configFile = rootProject.file('config/checkstyle.xml')
    toolVersion = '8.1'
    ignoreFailures = false
  }

  tasks.withType(Checkstyle).each { checkstyleTask ->
    checkstyleTask.doLast {
      reports.all { report ->
        def outputFile = report.destination
        if (outputFile.exists() && outputFile.text.contains("<error ")) {
          throw new GradleException("Found checkstyle issues in $outputFile")
        }
      }
    }
  }

  apply plugin: 'pmd'
  pmd {
    ruleSetFiles = rootProject.files('config/pmd.xml')
    toolVersion = '5.4.1'
    ignoreFailures = false
  }

  apply plugin: 'findbugs'
  findbugs {
    toolVersion = '3.0.1'
    excludeFilter = rootProject.file('config/findbugs_filter.xml')
    ignoreFailures = false
  }

  tasks.withType(FindBugs) {
    reports {
      xml.enabled = false
      html.enabled = true
    }
  }

  apply from: rootProject.file('jdepend.gradle')
  apply from: rootProject.file('coverage.gradle')

  task cleanOut(type: Delete) {
    group 'build'
    delete "${projectDir}/out"
  }
  tasks.clean.dependsOn(cleanOut)
}
