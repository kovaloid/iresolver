plugins {
  id 'com.github.spotbugs' version '2.0.1'
}

apply plugin: 'application'

mainClassName = 'com.koval.resolver.IResolverApplication'

def unixClassPath = 'CLASSPATH=\\$APP_HOME/lib/*:\\$APP_HOME/config:\\$APP_HOME/rules:\\$APP_HOME/data'
def windowsClassPath = 'CLASSPATH=%APP_HOME%/lib/;%APP_HOME%/lib/*;%APP_HOME%/config;%APP_HOME%/rules;%APP_HOME%/data'

run {
  workingDir = file('src')
}

def javaExecTasks = [
  [taskName: 'createIssuesDataSet', argName: 'create-issues-data-set'],
  [taskName: 'createIssuesVectorModel', argName: 'create-issues-vector-model'],
  [taskName: 'createGranularIssuesDataSets', argName: 'create-granular-issues-data-sets'],
  [taskName: 'createGranularIssuesVectorModels', argName: 'create-granular-issues-vector-models'],
  [taskName: 'createDocumentationDataSet', argName: 'create-documentation-data-set'],
  [taskName: 'createDocumentationVectorModel', argName: 'create-documentation-vector-model'],
  [taskName: 'createConfluenceDataSet', argName: 'create-confluence-data-set'],
  [taskName: 'createConfluenceVectorModel', argName: 'create-confluence-vector-model'],
  [taskName: 'printIssueFields', argName: 'print-issue-fields'],
  [taskName: 'runUI', argName: 'run-ui']
  // [taskName: 'testSimilarityProcessor', argName: 'test-similarity-processor']
]

javaExecTasks.each { item ->
  task "${item.taskName}"(type: JavaExec) {
    group 'application'
    main = "$mainClassName"
    classpath = sourceSets.main.runtimeClasspath
    workingDir = file('src')
    args = ["${item.argName}"]
  }
}

sourceSets {
  main {
    resources {
      srcDir 'data'
      srcDir 'docs'
      srcDir 'src/main/resources'
      srcDir 'common-api/src/main/resources'
      srcDir 'rule-engine-processor/src/main/resources'
      srcDir 'html-reporter/src/main/resources'
    }
  }
}

dependencies {
  compile project(':jira-connector'),
      project(':bugzilla-connector'),
      project(':confluence-connector'),
      project(':gitlab-connector'),
      project(':issues-processor'),
      project(':granular-issues-processor'),
      project(':documentation-processor'),
      project(':confluence-processor'),
      project(':rule-engine-processor'),
      project(':html-reporter'),
      project(':text-reporter'),
      project(':test-similarity-processor')
}

wrapper {
  gradleVersion = '5.6.4'
}

distributions {
  main {
    baseName = 'iresolver'
    contents {
      from('common-api/src/main/resources/configuration.yml') { into 'config' }
      from('html-reporter/src/main/resources') { into 'config' }
      from('src/main/resources/logback.xml') { into 'config' }
      from('rule-engine-processor/src/main/resources') { into 'rules' }
      from('docs') { into 'docs' }
      exclude('**/*-android-*.jar')
      exclude('**/sslext*.jar')
      exclude('**/oro*.jar')
      exclude('**/stax2*.jar')
      exclude('**/xpp3*.jar')
      exclude('**/xstream*.jar')
      exclude('**/xmlpull*.jar')
      exclude('**/fastutil*.jar')
      exclude('**/findbugs*.jar')
      exclude('**/freemarker*.jar')
      exclude('**/lombok*.jar')
      exclude('**/neoitertools*.jar')
      exclude('**/protobuf*.jar')
    }
  }
}

startScripts {
  group 'distribution'
  classpath += files('config')
  applicationName = 'run'
  doLast {
    def windowsScriptFile = file getWindowsScript()
    def unixScriptFile = file getUnixScript()
    windowsScriptFile.text = windowsScriptFile.text
        .replaceFirst(/CLASSPATH=\S+/, windowsClassPath)
    unixScriptFile.text = unixScriptFile.text
        .replaceFirst(/CLASSPATH=\S+/, unixClassPath)
  }
}

def createStartScriptsTasks = [
  [taskName: 'createIssuesDataSetScript', scriptName: 'create-issues-data-set'],
  [taskName: 'createIssuesVectorModelScript', scriptName: 'create-issues-vector-model'],
  [taskName: 'createGranularIssuesDataSetsScript', scriptName: 'create-granular-issues-data-sets'],
  [taskName: 'createGranularIssuesVectorModelsScript', scriptName: 'create-granular-issues-vector-models'],
  [taskName: 'createDocumentationDataSetScript', scriptName: 'create-documentation-data-set'],
  [taskName: 'createDocumentationVectorModelScript', scriptName: 'create-documentation-vector-model'],
  [taskName: 'createConfluenceDataSetScript', scriptName: 'create-confluence-data-set'],
  [taskName: 'createConfluenceVectorModelScript', scriptName: 'create-confluence-vector-model'],
  [taskName: 'printIssueFieldsScript', scriptName: 'print-issue-fields'],
  [taskName: 'runUIScript', scriptName: 'run-ui']
  // [taskName: 'testSimilarityProcessorScript', scriptName: 'test-similarity-processor']
]

createStartScriptsTasks.each { item ->
  task "${item.taskName}"(type: CreateStartScripts) {
    group 'distribution'
    mainClassName = startScripts.mainClassName
    classpath = startScripts.classpath
    outputDir = startScripts.outputDir
    applicationName = "${item.scriptName}"

    "${item.taskName}" {
      doLast {
        def windowsScriptFile = file getWindowsScript()
        def unixScriptFile = file getUnixScript()
        windowsScriptFile.text = windowsScriptFile.text
            .replaceFirst(/CLASSPATH=\S+/, windowsClassPath)
        unixScriptFile.text = unixScriptFile.text
            .replaceFirst(/CLASSPATH=\S+/, unixClassPath)
        windowsScriptFile.text = windowsScriptFile.text
            .replaceFirst('CMD_LINE_ARGS=', "CMD_LINE_ARGS=${item.scriptName}")
        unixScriptFile.text = unixScriptFile.text
            .replaceFirst('APP_ARGS=', "APP_ARGS=${item.scriptName}")
      }
    }
  }
}

applicationDistribution.into('bin') {
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
  createStartScriptsTasks.each { item ->
    from(tasks.getByName(item.taskName))
  }
  fileMode = 0755
}

jar {
  exclude('*.xml', '*.zip', '*.txt', '*.properties', '*.vm', '*.drl', '*.yml', '*.pdf', '*.docx')
}

defaultTasks 'build'

allprojects {
  apply plugin: 'java'
  apply plugin: 'idea'
  apply plugin: 'eclipse'

  group = 'com.koval.iresolver'
  sourceCompatibility = 1.8

  repositories {
    mavenCentral()
    maven {
      url 'https://m2proxy.atlassian.com/repository/public'
    }
    maven {
      url 'http://repository.jboss.org/nexus/content/groups/public-jboss'
    }
  }

  compileJava {
    options.compilerArgs << '-Xlint:deprecation'
  }

  apply plugin: 'checkstyle'
  checkstyle {
    configFile = rootProject.file('config/checkstyle.xml')
    toolVersion = '8.1'
    ignoreFailures = false
  }

  tasks.withType(Checkstyle).each { checkstyleTask ->
    checkstyleTask.doLast {
      reports.all { report ->
        def outputFile = report.destination
        if (outputFile.exists() && outputFile.text.contains("<error ")) {
          throw new GradleException("Found checkstyle issues in $outputFile")
        }
      }
    }
  }

  apply plugin: 'pmd'
  pmd {
    ruleSetFiles = rootProject.files('config/pmd.xml')
    ruleSets = []
    toolVersion = '6.21.0'
    ignoreFailures = false
  }

  spotbugs {
    toolVersion = '3.1.12'
    reportLevel = 'low'
    effort = 'max'
    excludeFilter = rootProject.file('config/findbugs_filter.xml')
    ignoreFailures = true
  }

  apply from: rootProject.file('jdepend.gradle')
  apply from: rootProject.file('coverage.gradle')

  task cleanOut(type: Delete) {
    group 'build'
    delete "${projectDir}/out"
  }
  tasks.clean.dependsOn(cleanOut)
}

subprojects {
  apply plugin: "com.github.spotbugs"

  repositories {
    maven { url "https://plugins.gradle.org/m2/" }
  }

  def suffix = project.path.replaceAll(':', '-').replaceFirst('-', '')
  def prefix = rootProject.buildDir.absolutePath
  def path = "$prefix/reports/spotbugs/$suffix"

  spotbugs {
    toolVersion = '3.1.12'
    reportLevel = 'low'
    effort = 'max'
    reportsDir = file("$path")
    ignoreFailures = true
  }

  tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports {
      html {
        enabled = true
        impliesSubProjects = true
        destination file("$path"+".html")
      }
      xml {
        enabled = false
      }
    }
  }
}